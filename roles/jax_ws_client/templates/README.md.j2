#### Prerequisites:
1. Soap Port (also known as Interface, `@WebService`):

   ```
   @WebService(name = "SoapServicePort", targetNamespace = "http://host.com/webservices/soap/")
   @XmlSeeAlso({
       ObjectFactory.class
   })
   public interface SoapServicePort { ...}
   ```
2. Soap Service (`@WebServiceClient`):

   ```
   import javax.xml.ws.Service;   
   
   @WebServiceClient(name = "MySoapService", targetNamespace = "http://host.com/webservices/soap/", wsdlLocation = "META-INF/wsdl/soap.v1.wsdl")
   public class MySoapService
       extends Service
   {
       @WebEndpoint(name = "SoapServicePort")
       public SoapServicePort getServicePort() {
           return super.getPort(new QName("http://host.com/webservices/soap/", "SoapServicePort"), SoapServicePort.class);
       }
   ```
3. You have generated soap classes. 

   You can generate them from url or from a local wsdl file.
   Here is an example how to use a `soap.v1.wsdl` local file.

    ```
      <build>

        <plugins>

          <plugin>
            <!-- https://mvnrepository.com/artifact/org.codehaus.mojo/jaxws-maven-plugin -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>jaxws-maven-plugin</artifactId>
            <version>2.6</version>

            <dependencies>
              <dependency>
                <groupId>org.jvnet.jaxb2_commons</groupId>
                <artifactId>jaxb2-fluent-api</artifactId>
                <version>3.0</version>
              </dependency>
              <dependency>
                <groupId>com.sun.xml.ws</groupId>
                <artifactId>jaxws-tools</artifactId>
                <version>2.3.0</version>
              </dependency>
            </dependencies>

            <executions>
              <execution>
                <id>your-soap-wsdl-exec</id>
                <goals>
                  <goal>wsimport</goal>
                </goals>
                <configuration>
                  <packageName>{{ group_id }}.soap.generated</packageName>
                  <xjcArgs>
                    <xjcArg>-Xfluent-api</xjcArg>
                  </xjcArgs>
                  <verbose>true</verbose>
                  <keep>true</keep> <!--used by default-->
                  <sourceDestDir>${project.build.sourceDirectory}</sourceDestDir>
                  <wsdlDirectory>src/main/resources/META-INF/wsdl</wsdlDirectory>
                  <wsdlFiles>
                    <wsdlFile>soap.v1.wsdl</wsdlFile>
                  </wsdlFiles>
                  <wsdlLocation>META-INF/wsdl/soap.v1.wsdl</wsdlLocation>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>

    ```

    **Note:**

    Not all plugins allow to use wsdl from the class path resources
    which is not flexible and has some issues.
    The plugin in this configuration allows to do that.

4. Add Maven dependency:

    ```
        <dependency>
          <groupId>{{ group_id }}</groupId>
          <artifactId>{{ artifact_id }}-commons-jax-ws-client</artifactId>
          <version>${project.version}</version>
        </dependency>
    ```

5. Create an instance of `SoapServicePort`:

    ```
       public static final String SOAP_WSDL_URL = "/mp/?wsdl";

       SoapServicePort servicePort = SoapServiceConfig
           .instance(() -> new MySoapService().getMediaPoolPort())
           .wsdlUrl("someRemoteHost:8080" + SOAP_WSDL_URL)
           .proxy();
    ```

    **Notes**:

    5.1. This works only if your wsdl is taken from inside classpath:

      ```
      @WebServiceClient(name = "MySoapService", ..., wsdlLocation = "META-INF/wsdl/soap.v1.wsdl")
      ```
      But not from a local file path:
      ```
      @WebServiceClient(name = "MySoapService", ..., wsdlLocation = "file:/.../src/main/resources/META-INF/wsdl/soap.v1.wsdl")
      ```
      Actually it depends on the way how you configure it. The following plugin allows to use file from resources:
      ```
      <plugin>
        <!-- https://mvnrepository.com/artifact/org.codehaus.mojo/jaxws-maven-plugin -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>jaxws-maven-plugin</artifactId>
        <version>2.6</version>
      ```

    5.2 If wsdl is generated from a local file, the only option to specify correctly remote system:

      ```
      public static final String SOAP_WSDL_URL = "/mp/?wsdl";

      SoapServicePort servicePort = SoapServiceConfig
        .instance(() -> {
          try {
            return new MySoapService(
              new URL("someRemoteHost:8080" + SOAP_WSDL_URL))
              .getMediaPoolPort();
          } catch (MalformedURLException e) {
            throw new RuntimeException(e);
          }
        })
        .proxy();
     ```

6. Exclude `{{ group_id }}.soap.generated` packge from FindBug analyses:

    In `findbugs-exclude.xml` file add:

    ```
      <Match>
        <Package name="{{ group_id }}.soap.generated"/>
      </Match>
    ```

#### Logging:

For debug purpose,
enable debug level for `{{ group_id }}.commons.soap.filter` package.

In tests you can enable it as:
```
  @BeforeClass
  public static void init() {
    System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.SimpleLog");
    System.setProperty("org.apache.commons.logging.simplelog.log.{{ group_id }}.commons.soap.filter", "DEBUG");
  }
```
You can also use a default debug option:
```
  @BeforeClass
  public static void init() {
    //set logging to console, see https://stackoverflow.com/questions/1945618/tracing-xml-request-responses-with-jax-ws
    System.setProperty("com.sun.xml.ws.transport.http.client.HttpTransportPipe.dump", "true");
    System.setProperty("com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.dump", "true");
    System.setProperty("com.sun.xml.ws.transport.http.HttpAdapter.dump", "true");
    System.setProperty("com.sun.xml.internal.ws.transport.http.HttpAdapter.dump", "true");
    System.setProperty("com.sun.xml.internal.ws.transport.http.HttpAdapter.dumpTreshold", "999999");
  }
```

#### Handle SOAP exceptions

```
import static {{ group_id }}.commons.soap.SoapUtils;

} catch (Exception e) {
  log.error(String.join("\n", SoapUtils.getLastSoapCallDetails());
}
```

#### Domain/host location

By default, the service address is taken from wsdl file, see `some.server.com:18080`:
```
<wsdl:service name="YourSoapService">
  <wsdl:port binding="tns:YourSoapServiceBinding" name="YourSoapPort">
    <soap:address location="http://some.server.com:18080/webservices/dse/v2/"/>
  </wsdl:port>
</wsdl:service>
```
If you:
 - generate SOAP classes from a wsdl file available via class path resources:
    `@WebServiceClient(... wsdlLocation = "META-INF/wsdl/soap.v1.wsdl")`
 - create Soap Port/Interface without setting of wsdl url, like:
    ```
       SoapServicePort servicePort = SoapServiceConfig
           .instance(() -> new MySoapService().getMediaPoolPort())
           .proxy();
    ```
The `soap:address location` value from this local wsdl will be used,
which might be not correct. You have 2 solutions:

1. Set a remote wsdl via `wsdlUrl`:
    ```
       SoapServicePort servicePort = SoapServiceConfig
           .instance(() -> new MySoapService().getMediaPoolPort())
           .wsdlUrl("someRemoteHost:8080" + SOAP_WSDL_URL)
           .proxy();
    ```

2. Set a remote wsdl when service is created:

   ```
   public static final String SOAP_WSDL_URL = "/mp/?wsdl";

   SoapServicePort servicePort = SoapServiceConfig
       .instance(() -> {
         try {
           return new MySoapService(
             new URL("someRemoteHost:8080" + SOAP_WSDL_URL))
             .getMediaPoolPort();
         } catch (MalformedURLException e) {
           throw new RuntimeException(e);
         }
       })
       .proxy();
   ```
If a wsdl file is used from a local file path, but not from class path resources:

`@WebServiceClient(... wsdlLocation = "file:/.../src/main/resources/META-INF/wsdl/soap.v1.wsdl")`

The only option to set the correct address:
   ```
   public static final String SOAP_WSDL_URL = "/mp/?wsdl";

   SoapServicePort servicePort = SoapServiceConfig
       .instance(() -> {
         try {
           return new MySoapService(
             new URL("someRemoteHost:8080" + SOAP_WSDL_URL))
             .getMediaPoolPort();
         } catch (MalformedURLException e) {
           throw new RuntimeException(e);
         }
       })
       .proxy();
   ```


#### Authentication

Only basic authentication is supported now. You can set it as:
```
  SoapServicePort mpServicePort = SoapServiceConfig
    .instance(...)
    .basicAuth("user", "pwd")
    .proxy();
```

#### Timeout setting

By default timeout is set to 5 min. You can change this value by `timeOutInSeconds`:
```
  SoapServicePort mpServicePort = SoapServiceConfig
    .instance(...)
    .timeOutInSeconds(500)
    .proxy();
```

#### File uploading

1. You can upload a file to the server from external URL

    ```
      SoapFileUploadServicePort soapFileUploadServicePort = SoapServiceConfig
        .instance4FileUploading(...)
        .proxy();
    
    import javax.activation.DataHandler;
    import org.apache.cxf.attachment.AttachmentDataSource;
    
      public UploadResult uploadFileFromUrl(
        final String fileName,
        final String url) {
        try {
          final InputStream is = new URL(url).openStream();
          //TODO validate link (without downloading it)
          DataHandler dataHandler = new DataHandler(new AttachmentDataSource(fileName, is));
          return soapFileUploadServicePort
            .uploadAsStream(fileName, dataHandler);
        } catch (IOException e) {
          throw logErrorAndRethrow(
            "Could not create data handler from url: " + url + ". Reason: " + e.getMessage());
        }
      }
    ```

2. From a local file:

    ```
    import javax.activation.DataHandler;
    import javax.activation.FileDataSource;
    
      public UploadResult uploadFile(
        final String fullFilePath) {
          File file = new File(fullFilePath);
          //todo validate file
          DataHandler dataHandler = new DataHandler(new FileDataSource(file));
          return soapFileUploadServicePort
            .uploadAsStream(file.getName(), dataHandler);
      }
    ```

#### Chunking

By default `allowChunking` is enabled. You can disable it by creating config as:
```
  SoapServicePort mpServicePort = SoapServiceConfig
    .instance(...)
    .disableChunking()
    .proxy();
```