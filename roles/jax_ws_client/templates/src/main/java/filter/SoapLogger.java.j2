package {{ group_id }}.commons.soap.filter;

import java.io.ByteArrayOutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;

import javax.xml.namespace.QName;
import javax.xml.soap.SOAPMessage;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class SoapLogger implements SOAPHandler<SOAPMessageContext> {

  private static final Log logger = LogFactory.getLog(SoapLogger.class);

  @Override
  public boolean handleMessage(SOAPMessageContext context) {

    //run it anyway, even if debug mode is not enabled
    List<String> details = handleMessageAndGetDetails(context);

    if (logger.isDebugEnabled()) {
      logger.debug(String.join("\n", details));
    }

    return true;
  }

  @Override
  public boolean handleFault(SOAPMessageContext context) {

    handleMessageAndGetDetails(context);

    logger.error(String.join("\n",
      SoapThreadLocalHolder.getSoapDetails()));

    return true;
  }

  @Override
  public Set<QName> getHeaders() {
    return new HashSet<>();
  }

  @Override
  public void close(MessageContext ignored) {}

  private List<String> handleMessageAndGetDetails(SOAPMessageContext context) {
    boolean isRequest = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
    if (isRequest) {
      List<String> details = extractRequestDetails(context);
      SoapThreadLocalHolder.storeSoapRequestDetails(details);
      return details;
    } else {
      List<String> details = extractResponseDetails(context);
      SoapThreadLocalHolder.storeSoapResponseDetails(details);
      return details;
    }
  }

  private List<String> extractRequestDetails(SOAPMessageContext context) {
    boolean isRequest = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
    if (isRequest) {
      List<String> elements = new LinkedList<>();
      elements.add("SOAP Request URL:");
      elements.add((String) context.get(org.apache.cxf.message.Message.ENDPOINT_ADDRESS));
      elements.addAll(
        elements(context, "Request headers:", "Request body:"));
      //context.put(SOAP_ELEMENTS, elements);
      return elements;
    } else {
      throw new IllegalStateException("Wrong API usage: The soap message is a response but not a request");
    }
  }

  private List<String> extractResponseDetails(SOAPMessageContext context) {
    boolean isResponse = ! (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
    if (isResponse) {
      List<String> elements = new LinkedList<>();
      elements.add("SOAP Response Code:");
      elements.add(Integer.toString((Integer) context.get(org.apache.cxf.message.Message.RESPONSE_CODE)));
      elements.addAll(
        elements(context, "Response headers:", "Response body:"));
      return elements;
    } else {
      throw new IllegalStateException("Wrong API usage: The soap message is a request but not a response");
    }
  }

  private List<String> elements(
    final SOAPMessageContext context,
    final String headersPrefix,
    final String bodyPrefix){
    List<String> requestElements = new LinkedList<>();
    requestElements.add(headersPrefix);
    requestElements.addAll(((TreeMap<String, List<String>>)context.get(org.apache.cxf.message.Message.PROTOCOL_HEADERS))
      .entrySet().stream().map(entry -> entry.getKey() + " -> " + String.join(";", entry.getValue()))
      .collect(Collectors.toList()));
    requestElements.add(bodyPrefix);
    requestElements.add(soapBody(context.getMessage()));
    return requestElements;
  }

  private String soapBody(SOAPMessage soapMessage){
    ByteArrayOutputStream baos = new ByteArrayOutputStream(32_000);
    try {
      soapMessage.writeTo(baos);
      String msgBody = baos.toString("UTF-8");
      return prettyString(msgBody, 2);
    } catch (Exception e) {
      throw new IllegalStateException(e);
    }
  }

  private String prettyString(String xmlData, int indent) {
    try {
      TransformerFactory transformerFactory = TransformerFactory.newInstance();
      transformerFactory.setAttribute("indent-number", indent);

      Transformer transformer = transformerFactory.newTransformer();
      transformer.setOutputProperty(OutputKeys.INDENT, "yes");

      StringWriter stringWriter = new StringWriter();
      StreamResult xmlOutput = new StreamResult(stringWriter);

      Source xmlInput = new StreamSource(new StringReader(xmlData));
      transformer.transform(xmlInput, xmlOutput);

      return xmlOutput.getWriter().toString();
    } catch (TransformerException e) {
      throw new IllegalStateException(e);
    }
  }

}
