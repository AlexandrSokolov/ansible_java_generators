package {{ group_id }}.commons.cron;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.ejb.Singleton;
import javax.ejb.Timeout;
import javax.ejb.TimerConfig;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Singleton
public class CronService {

  private static Log logger = LogFactory.getLog(CronService.class);

  @Resource
  javax.ejb.TimerService timerService;

  Map<String, Executor> cronJobs = new HashMap<>();

  public void createTimer(
    final String timerName,
    final String cronExpression,
    final Executor executor) {

    cronJobs.put(timerName, executor);

    TimerConfig timerConfig = new TimerConfig();
    timerConfig.setInfo(timerName);
    timerConfig.setPersistent(false);

    timerService.createCalendarTimer(new Timer().fromCronJob(cronExpression), timerConfig);
  }

  @Timeout
  public void triggerService(javax.ejb.Timer timer) {
    try {
      String timerName = (String) timer.getInfo();
      if (cronJobs.containsKey(timerName)) {
        cronJobs.get(timerName)
          .execute();
      }
    } catch (Exception e) {
      logger.error("Timer " + timer.getInfo() + " failed. ", e);
    }
  }

  public List<Timer> currentTimers() {
    return timerService.getTimers().stream()
      .map(Timer::instance)
      .collect(Collectors.toList());
  }

  @PostConstruct
  void clearTimer() {
    timerService.getTimers().stream()
      .filter(timer -> cronJobs.containsKey(timer.getInfo()))
      .forEach(javax.ejb.Timer::cancel);
  }


}
