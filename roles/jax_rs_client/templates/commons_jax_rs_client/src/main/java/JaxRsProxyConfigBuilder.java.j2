package {{ group_id }}.commons.jax.rs.client;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Lists;
import {{ group_id }}.commons.jax.rs.client.filter.AuthClientRequestFilterFactory;
import {{ group_id }}.commons.jax.rs.client.filter.JacksonProvider;
import {{ group_id }}.commons.jax.rs.client.filter.LogDebugFilter;
import {{ group_id }}.commons.jax.rs.client.filter.LogErrorFilter;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.validator.routines.UrlValidator;

import javax.ws.rs.client.ClientRequestFilter;
import javax.ws.rs.client.ClientResponseFilter;
import java.util.Collection;
import java.util.function.Function;

public class JaxRsProxyConfigBuilder {

  public static final String SINGLE_AUTH = "Cannot create proxy config. Auth filter is already set.";
  public static final String DOMAIN_NOT_SET = "Cannot create proxy config. Domain is not specified.";
  public static final String DOMAIN_WRONG = "Cannot create proxy config. Domain '%s' is not a correct url. " +
    "Please make sure it contains a correct protocol like 'http' (or other valid ones).";
  public static final String CLAZZ_NOT_SET = "Cannot create proxy config. Class for logging is not set.";

  private final static UrlValidator urlValidator = new UrlValidator(UrlValidator.ALLOW_LOCAL_URLS);

  private String domain;

  private Class<?> clazz4Logging;

  private ClientRequestFilter authFilter;
  
  private ObjectMapper objectMapper = new ObjectMapper();

  private Collection<ClientResponseFilter> clientResponseFilters = Lists.newArrayList(

  );

  public JaxRsProxyConfigBuilder withDomain(final String domain) {
    if (!urlValidator.isValid(domain)){
      throw new IllegalStateException(String.format(DOMAIN_WRONG, domain));
    }
    this.domain = domain;
    return this;
  }

  public JaxRsProxyConfigBuilder withBasicAuth(
    final String login, final String password) {
    if (this.authFilter != null) {
      throw new IllegalStateException(SINGLE_AUTH);
    }
    this.authFilter = AuthClientRequestFilterFactory.basicAuthentication(login, password);
    return this;
  }

  public JaxRsProxyConfigBuilder withWebContextAuth() {
    if (this.authFilter != null) {
      throw new IllegalStateException(SINGLE_AUTH);
    }
    //TODO
    return this;
  }

  /**
   * Configures jwt auth via basic auth filter, in case the same domain is used
   *  for both authentication and rest requests
   *
   * @param login
   * @param password
   * @param authInterface
   * @param jwtAuthHeaderExtractor
   * @param <T>
   * @return
   */
  public <T> JaxRsProxyConfigBuilder withJwtViaBasicAuth(
    final String login,
    final String password,
    final Class<T> authInterface,
    final Function<T, String> jwtAuthHeaderExtractor) {
    if (this.domain != null) {
      return withJwtViaBasicAuth(
        domain,
        login,
        password,
        authInterface,
        jwtAuthHeaderExtractor);
    } else {
      throw new IllegalStateException("For jwt authentication via basic auth, domain must be specified");
    }

  }

  /**
   * Configures jwt auth via basic auth filter, in case different domains are used
   *  for both authentication and rest requests
   *
   * @param login
   * @param password
   * @param authInterface
   * @param jwtAuthHeaderExtractor
   * @param <T>
   * @return
   */
  public <T> JaxRsProxyConfigBuilder withJwtViaBasicAuth(
    final String basicAuthDomain,
    final String login,
    final String password,
    final Class<T> authInterface,
    final Function<T, String> jwtAuthHeaderExtractor) {
    if (this.authFilter != null) {
      throw new IllegalStateException(SINGLE_AUTH);
    }
    if (StringUtils.isEmpty(basicAuthDomain)) {
      throw new IllegalStateException(DOMAIN_NOT_SET);
    }
    if (!urlValidator.isValid(basicAuthDomain)){
      throw new IllegalStateException(String.format(DOMAIN_WRONG, basicAuthDomain));
    }
    if (this.clazz4Logging == null) {
      throw new IllegalStateException(CLAZZ_NOT_SET);
    }
    this.authFilter = AuthClientRequestFilterFactory
      .jwtThroughBasicAuthentication(
        basicAuthDomain,
        login,
        password,
        authInterface,
        jwtAuthHeaderExtractor,
        this.clazz4Logging);
    return this;
  }

  public JaxRsProxyConfigBuilder withJwtViaWebContextAuth() {
    if (this.authFilter != null) {
      throw new IllegalStateException(SINGLE_AUTH);
    }
    //TODO
    return this;
  }

  public JaxRsProxyConfigBuilder withCustomAuthFilter(
    final ClientRequestFilter authFilter) {
    if (this.authFilter != null) {
      throw new IllegalStateException(SINGLE_AUTH);
    }
    this.authFilter = authFilter;
    return this;
  }

  public JaxRsProxyConfigBuilder withClientResponseFilter(
    final ClientResponseFilter clientRequestFilter) {
    this.clientResponseFilters.add(clientRequestFilter);
    return this;
  }

  public JaxRsProxyConfigBuilder withObjectMapper(
    final ObjectMapper objectMapper) {
    this.objectMapper = objectMapper;
    return this;
  }

  public JaxRsProxyConfigBuilder withClazz4Logging(
    final Class<?> clazz4Logging) {
    this.clazz4Logging = clazz4Logging;
    return this;
  }

  public JaxRsProxyConfig build() {
    if (StringUtils.isEmpty(this.domain)) {
      throw new IllegalStateException(DOMAIN_NOT_SET);
    }
    if (this.clazz4Logging == null) {
      throw new IllegalStateException(CLAZZ_NOT_SET);
    }
    this.clientResponseFilters.addAll(
      Lists.newArrayList(
        LogErrorFilter.instance(this.clazz4Logging, this.objectMapper),
        LogDebugFilter.instance(this.clazz4Logging, this.objectMapper)));

    return new JaxRsProxyConfig(
      domain,
      authFilter,
      clientResponseFilters,
      new JacksonProvider(objectMapper));

  }
}
